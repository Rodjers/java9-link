apply plugin: 'java-library'
apply plugin: 'application'

final jdk9Home = "/usr/lib/jvm/jdk-9"
mainClassName = 'example.server.Runner'

repositories {
    jcenter()
}

dependencies {
}

sourceCompatibility = JavaVersion.VERSION_1_9

if (sourceCompatibility == JavaVersion.VERSION_1_9) {
    tasks.withType(JavaCompile) {
        options.fork = true
        options.forkOptions.executable = "${jdk9Home}/bin/javac"
    }
} else {
    sourceSets.main.java.exclude("**/module-info.java")
}

task customJre(dependsOn: jar) {
    def outputPath = "${buildDir}/custom-jre"
    ext.output = file(outputPath)
    doLast {
        delete output
        exec {
            executable "${jdk9Home}/bin/jlink"
            args = ['--module-path', "$jdk9Home/jmods:${jar.archivePath}", '--add-modules', 'example.server',
                    '--output', outputPath,
                    '--compress=2', '--strip-debug'
            ]
        }
        // fix non-writable files in legal/
        exec {
            executable 'chmod'
            args = ['u+w', '-R', outputPath]
        }
    }
}

jar {
    manifest {
        attributes('Main-Class': mainClassName)
    }
}

clean {
    delete 'build/custom-jre'
    delete 'build/docker'
}

task copyFilesForDocker(type: Copy, dependsOn: jar) {
    from file('Dockerfile')
    from file('Dockerfile-9')
    from(tasks.jar)
    from(customJre.output) {
        into "custom-jre"
    }
    into 'build/docker'
}

task image(dependsOn: copyFilesForDocker) {
    doLast {
        def imageName = "${project.name}:jre${sourceCompatibility.majorVersion}"
        exec {
            executable 'docker'
            args = ['build', '-t', imageName]
            if (sourceCompatibility == JavaVersion.VERSION_1_9) {
                args += ['--file', 'Dockerfile-9']
            }
            args += ['.']
            workingDir 'build/docker'
        }
        println "Built Docker image $imageName"
    }
}
