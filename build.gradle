plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.4' apply false
}

final jdk9Home = "/usr/lib/jvm/jdk-9"
final javaVersion = project.hasProperty('javaVersion') ? JavaVersion.toVersion(project.javaVersion)
        : JavaVersion.VERSION_1_9
final customJreOutput = file("${buildDir}/custom-jre")
final modulesDir = file('build/modules')

subprojects {
    apply plugin: 'java'
    if (project.name == 'greeter-server') {
        apply plugin: 'com.github.johnrengelman.shadow'
    }

    sourceCompatibility = javaVersion

    repositories {
        jcenter()
    }

    dependencies {
    }
}

task clean(type: Delete) {
    delete customJreOutput
    delete 'build/custom-jre.tar.bz2'
    delete modulesDir
    delete 'build/docker'
}

task build

if (javaVersion == JavaVersion.VERSION_1_9) {
    subprojects {
        task copyDependenciesAsModules(type: Copy) {
            from configurations.runtime
            into modulesDir
        }

        tasks.withType(AbstractCompile) {
            dependsOn copyDependenciesAsModules
            options.fork = true
            options.forkOptions.javaHome = file(jdk9Home)
            options.compilerArgs = ['--module-path', modulesDir]
            doLast {
                def compileOpts = file('build/tmp/compileJava/java-compiler-args.txt').text.replaceAll("\n", " ")
                logger.lifecycle "$jdk9Home/bin/javac ${compileOpts}"
            }
        }
    }
    task copyServerModule(type: Copy) {
        from project(':greeter-server').tasks.jar
        into modulesDir
    }
    task customJre(dependsOn: copyServerModule) {
        inputs.dir modulesDir
        outputs.dir customJreOutput

        doLast {
            delete customJreOutput
            exec {
                executable "${jdk9Home}/bin/jlink"
                args = ['--module-path', "$jdk9Home/jmods:$modulesDir",
                        '--add-modules', 'example.greeter.server',
                        '--output', customJreOutput,
                        '--compress=2', '--strip-debug'
                ]
                logger.lifecycle commandLine.join(' ')
            }
            // fix non-writable files in legal/
            exec {
                executable 'chmod'
                args = ['u+w', '-R', customJreOutput]
            }
        }
    }
    task compressCustomJre(type: Exec, dependsOn: customJre) {
        inputs.dir "$buildDir/custom-jre"
        outputs.dir "$buildDir/custom-jre.tar.bz2"
        executable 'tar'
        workingDir buildDir
        args = ['cjf', 'custom-jre.tar.bz2', 'custom-jre']
    }
    build.dependsOn compressCustomJre

    task copyFilesForDocker(type: Sync, dependsOn: [customJre]) {
        from file('Dockerfile-9')
        from(customJreOutput) {
            into "custom-jre"
        }
        into 'build/docker'
    }
} else {
    subprojects {
        sourceSets.main.java.exclude("**/module-info.java")
    }
    def shadowJarTask = project(':greeter-server').tasks.shadowJar
    build.dependsOn shadowJarTask

    task copyFilesForDocker(type: Sync, dependsOn: [shadowJarTask]) {
        from file('Dockerfile')
        from(shadowJarTask)
        into 'build/docker'
    }
}


task image(dependsOn: copyFilesForDocker) {
    def imageName = "${project.name}:jre${javaVersion.majorVersion}"
    group = 'Build'
    description = "Build Docker image $imageName"
    doLast {
        exec {
            executable 'docker'
            args = ['build', '-t', imageName]
//            args += ['--pull']
            if (javaVersion == JavaVersion.VERSION_1_9) {
                args += ['--file', 'Dockerfile-9']
            }
            args += ['.']
            workingDir 'build/docker'
        }
        println "Built Docker image $imageName"
    }
}
